# -*- coding: utf-8 -*-
"""CV_Fetures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovaJS4aWz8ukQ_4iXawQVP8dW3Qw39aK
"""

import cv2
import sys

# Initialize OpenCV version
(major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')

# Define tracker type
tracker_types = ['BOOSTING', 'MIL', 'KCF', 'TLD', 'MEDIANFLOW', 'MOSSE', 'CSRT']
tracker_type = tracker_types[1]  # Change tracker type as needed (e.g., 'CSRT')

# Initialize tracker creation function
if tracker_type == 'BOOSTING':
    tracker_class = cv2.legacy.TrackerBoosting_create
elif tracker_type == 'MIL':
    tracker_class = cv2.legacy.TrackerMIL_create
elif tracker_type == 'KCF':
    tracker_class = cv2.legacy.TrackerKCF_create
elif tracker_type == 'TLD':
    tracker_class = cv2.legacy.TrackerTLD_create
elif tracker_type == 'MEDIANFLOW':
    tracker_class = cv2.legacy.TrackerMedianFlow_create
elif tracker_type == 'MOSSE':
    tracker_class = cv2.legacy.TrackerMOSSE_create
elif tracker_type == 'CSRT':
    tracker_class = cv2.legacy.TrackerCSRT_create

# Initialize MultiTracker
trackers = cv2.legacy.MultiTracker_create()

# Read video
video = cv2.VideoCapture(r"C:\Users\sohel\Downloads\Videos_for_project-20241109T110019Z-001\Videos_for_project\street_9.mp4")
if not video.isOpened():
    print("Could not open video")
    sys.exit()

# Get video frame dimensions
ok, frame = video.read()
if not ok:
    print("Cannot read video file")
    sys.exit()

# Resize the frame (optional)
frame = cv2.resize(frame, (720, 640))

# Set up video writer to save output
fourcc = cv2.VideoWriter_fourcc(*'XVID')  # Codec
out = cv2.VideoWriter(r'C:\Users\sohel\OneDrive\Desktop\output_with_bbox.avi', fourcc, video.get(cv2.CAP_PROP_FPS), (720, 640))

# Display instructions
print("Press 's' to select objects to track.")
print("Press 'q' to quit the application.")

while True:
    # Read the next frame
    ok, frame = video.read()
    if not ok:
        break

    # Resize the frame (optional)
    frame = cv2.resize(frame, (720, 640))

    # Update trackers
    success, boxes = trackers.update(frame)
    print(boxes)
    # Draw the bounding boxes on the frame
    if success:
        for bbox in boxes:
            p1 = (int(bbox[0]), int(bbox[1]))
            p2 = (int(bbox[0] + bbox[2]), int(bbox[1] + bbox[3]))
            cv2.rectangle(frame, p1, p2, (255, 0, 0), 2, 1)

    # Display the frame
    cv2.imshow("Multi-Object Tracking", frame)

    # Save the frame to the output video
    out.write(frame)

    # Wait for user input
    key = cv2.waitKey(1) & 0xFF

    # If 's' key is pressed, let the user select an ROI
    if key == ord("s"):
        # Select an ROI and add it to the tracker
        box = cv2.selectROI("Multi-Object Tracking", frame, fromCenter=False, showCrosshair=True)
        tracker = tracker_class()
        trackers.add(tracker, frame, box)

        # Immediately show the selected bounding box
        p1 = (int(box[0]), int(box[1]))
        p2 = (int(box[0] + box[2]), int(box[1] + box[3]))
        cv2.rectangle(frame, p1, p2, (0, 255, 0), 2, 1)

        # Show the updated frame with the new bounding box
        cv2.imshow("Multi-Object Tracking", frame)

    # Exit if 'q' is pressed
    elif key == ord("q"):
        break

# Release resources
video.release()
out.release()
cv2.destroyAllWindows()