# -*- coding: utf-8 -*-
"""CV_Fetures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovaJS4aWz8ukQ_4iXawQVP8dW3Qw39aK
"""

import cv2
import sys
from random import randint
# Initialize OpenCV version
(major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')

# Define tracker type
tracker_types = ['BOOSTING', 'MIL', 'KCF', 'TLD', 'MEDIANFLOW', 'MOSSE', 'CSRT']

def createTrackerByName(trackerType):
# Initialize tracker creation function
    if tracker_type == 'BOOSTING':
        return  cv2.legacy.TrackerBoosting_create()
    elif tracker_type == 'MIL':
        return cv2.legacy.TrackerMIL_create()
    elif tracker_type == 'KCF':
        return  cv2.legacy.TrackerKCF_create()
    elif tracker_type == 'TLD':
        return cv2.legacy.TrackerTLD_create()
    elif tracker_type == 'MEDIANFLOW':
        return cv2.legacy.TrackerMedianFlow_create()
    elif tracker_type == 'MOSSE':
        return cv2.legacy.TrackerMOSSE_create()
    elif tracker_type == 'CSRT':
        return cv2.legacy.TrackerCSRT_create()
    else:
        raise Exception("Tracker not selected from the given set")

# Initialize MultiTracker
trackers = cv2.legacy.MultiTracker_create()

# Read video
video = cv2.VideoCapture(r"/home/navneet/Downloads/street_2.mp4")
if not video.isOpened():
    print("Could not open video")
    sys.exit()

# Get video frame dimensions
ok, frame = video.read()
if not ok:
    print("Cannot read video file")
    sys.exit()

# Resize the frame (optional)
frame = cv2.resize(frame, (720, 640))

# Set up video writer to save output
#fourcc = cv2.VideoWriter_fourcc(*'XVID')  # Codec
#out = cv2.VideoWriter(r'C:\Users\sohel\OneDrive\Desktop\output_with_bbox.avi', fourcc, video.get(cv2.CAP_PROP_FPS), (720, 640))
# Display instructions

bboxes=[]
colors=[]

while True:
    bbox = cv2.selectROI('Multitracker',frame)
    bboxes.append(bbox)
    colors.append((randint(0,255),randint(0,255),randint(0,255)))
    print("press escape to quit selecting boxes and start tracking")
    k = cv2.waitKey(0) & 0xff 
    if k == 27: 
        break 
    cv2.destroyAllWindows() 


print(f'selected bounding boxes {bboxes} ')

final_bboxes=[]
for bb in bboxes:
    if bb[0] >=0 and bb[1]>=0 and bb[2]>0 and bb[3]>0:
        final_bboxes.append(bb)

tracker_type = "CSRT"
multitracker = cv2.legacy.MultiTracker_create()

for bb in final_bboxes:
    multitracker.add(createTrackerByName(trackerType=tracker_type),frame,bb)

print("1")

while video.isOpened():
  success, frame = video.read()
  frame = cv2.resize(frame, (720, 640))
  if not success:
    break
 
  # get updated location of objects in subsequent frames
  success, boxes = multitracker.update(frame)
 
  # draw tracked objects
  for i, newbox in enumerate(boxes):
    p1 = (int(newbox[0]), int(newbox[1]))
    p2 = (int(newbox[0] + newbox[2]), int(newbox[1] + newbox[3]))
    cv2.rectangle(frame, p1, p2, colors[i], 2, 1)
 
  # show frame
  cv2.imshow('MultiTracker', frame)
 
  # quit on ESC button
  if cv2.waitKey(1) & 0xFF == 27:  # Esc pressed
    break
